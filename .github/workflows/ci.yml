name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cozyauth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy
      - name: Enforce formatting
        run: cargo fmt --check
      - name: Check sqlx files
        run: |
          cargo install sqlx-cli
          sqlx migrate run --source server/migrations
          cargo sqlx prepare --workspace --check
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/cozyauth_test
      - name: Linting
        run: cargo clippy
      - name: Build tests
        run: cargo test --no-run
      - name: Run tests
        run: |
          cargo test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/cozyauth_test
          RELYING_PARTY_DOMAIN: https://cozyauth.dev

  build-image:
    name: Build container image for cozyauth-${{ matrix.binary }}
    strategy:
      matrix:
        binary: [cli, cloud, server]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.binary }}
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            BINARY=cozyauth-${{ matrix.binary }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  check-license-header:
    name: Check License Headers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check License Header
        uses: apache/skywalking-eyes/header@v0.6.0
